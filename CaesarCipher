import edu.duke.*;
/**
 * Write a description of CaesarCipher here.
 * 
 * @author (your name) 
 * @version (a version number or a date)
 */
public class CaesarCipher {
    public String encrypt(String input, int key){
        
        StringBuilder encrypted = new StringBuilder(input); 
        String alphabet = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"; 
        String shiftedAlphabet = alphabet.substring(key) + alphabet.substring(0,key); 
        
        for(int i = 0 ; i < encrypted.length(); i++){
           char curr = encrypted.charAt(i);
           char testCurr = Character.toUpperCase(curr);
           int currIndex = alphabet.indexOf(testCurr); 
           if(currIndex != -1){
               char newChar = shiftedAlphabet.charAt(currIndex); 
               if(Character.isLowerCase(curr)){
                   encrypted.setCharAt(i,Character.toLowerCase(newChar));
               } else {
                   encrypted.setCharAt(i, newChar);
               }
           }
        }
        return encrypted.toString(); 
    }
    
    
    public void testCaesar(){
        int key = 15; 
        FileResource fr = new FileResource(); 
        String message = fr.asString(); 
        String encrypted = encrypt(message, key);
        System.out.println("key is : " + key + "\n" + encrypted); 
        String decrypted = encrypt(encrypted, 26 - key); 
        System.out.println(decrypted);
    }
    
    public void testTwoKeys(){
        int key1 = 8;
        int key2 = 21; 
        FileResource fr = new FileResource(); 
        String message = fr.asString(); 
        String encrypted = encryptTwoKeys(message, key1, key2); 
        System.out.println("key is : " + key1 + " and "+ key2 + "\n" + encrypted); 
      
    }
    
    public String encryptTwoKeys(String input, int key1, int key2){
        StringBuilder sb = new StringBuilder(input); 
        String alphabet = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"; 
        String key1alphabet = alphabet.substring(key1) + alphabet.substring(0,key1);
        String key2alphabet = alphabet.substring(key2) + alphabet.substring(0,key2); 
        
        for(int i = 0; i < sb.length(); i++){
            char curr = sb.charAt(i); 
            char testChar = Character.toUpperCase(curr); 
            int idx = alphabet.indexOf(testChar); 
            if(idx != -1){
                if(i % 2 == 0){
                    char newChar = key1alphabet.charAt(idx);
                    if(Character.isLowerCase(curr)){
                        sb.setCharAt(i, Character.toLowerCase(newChar));
                    } else {
                        sb.setCharAt(i, newChar);
                    }
                } else if(i % 2 !=0) {
                    char newChar = key2alphabet.charAt(idx);
                    if(Character.isLowerCase(curr)){
                        sb.setCharAt(i, Character.toLowerCase(newChar));
                    } else {
                        sb.setCharAt(i, newChar);
                    }
                }
            }
        }
        return sb.toString();
    }
}
